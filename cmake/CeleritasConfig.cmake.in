#------------------------------- -*- cmake -*- -------------------------------#
# Copyright Celeritas contributors: see top-level COPYRIGHT file for details
# SPDX-License-Identifier: (Apache-2.0 OR MIT)
#----------------------------------------------------------------------------#

# Set up CMAKE paths
get_filename_component(CELERITAS_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
list(APPEND CMAKE_MODULE_PATH
  "${CELERITAS_CMAKE_DIR}"
)

#-----------------------------------------------------------------------------#
# Version compatibility
#
# To avoid unnecessary strictness (with non-obvious error messages) we do not
# use the `SameMajorVersion`/`SameMinorVersion` argument to
# \c write_basic_package_version_file . Instead we check for any requested
# package version here and warn deliberately if it doesn't match.
#-----------------------------------------------------------------------------#
# TODO for version 1.0.0: update logic to major version
if(((@PROJECT_NAME@_FIND_VERSION_MAJOR EQUAL 0
     AND @PROJECT_NAME@_FIND_VERSION_MINOR LESS @PROJECT_NAME@_VERSION_MINOR)
    OR @PROJECT_NAME@_FIND_VERSION_MAJOR GREATER 0)
   AND NOT @PROJECT_NAME@_FIND_VERSION_MAX VERSION_GREATER_EQUAL @PROJECT_NAME@_VERSION)
   message(AUTHOR_WARNING "@PROJECT_NAME@ version ${@PROJECT_NAME@_VERSION} "
     "may not be compatible with requested version "
     "${@PROJECT_NAME@_FIND_VERSION}: please update your find_package "
     "version range"
   )
endif()

#-----------------------------------------------------------------------------#
# Configuration macros
#-----------------------------------------------------------------------------#

macro(_celer_set_local_default var val)
  if(NOT DEFINED ${var})
    message(VERBOSE "Celeritas: set ${var}=${val}")
    set(${var} "${val}")
  endif()
endmacro()

macro(_celer_set_cache_default var val)
  if(NOT DEFINED ${var})
    message(STATUS "Celeritas: set cache ${var}=${val}")
    set(${var} "${val}" CACHE ${ARGN})
  endif()
endmacro()

#-----------------------------------------------------------------------------#
# Variables
#-----------------------------------------------------------------------------#

@CELERITAS_EXPORT_VARIABLES@

#-----------------------------------------------------------------------------#
# Dependencies
#-----------------------------------------------------------------------------#
cmake_policy(PUSH)
cmake_policy(VERSION 3.10...3.31)

include(CMakeFindDependencyMacro)

if(CELERITAS_USE_CUDA)
  find_dependency(CUDAToolkit REQUIRED)

  # Set cache variable if needed *before* checking CUDA
  _celer_set_cache_default(
    CMAKE_CUDA_ARCHITECTURES
    "${CELERITAS_CMAKE_CUDA_ARCHITECTURES}"
    STRING "CUDA architectures"
  )

  if(NOT CMAKE_CUDA_COMPILER_LOADED)
    # enable_language only really works in top-level CMake directory, not even subprojects
    # https://discourse.cmake.org/t/is-it-appropriate-to-use-enable-language-in-a-cmake-package-file/4335
    if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
      enable_language(CUDA)
    else()
      include(CheckLanguage)
      check_language(CUDA)
      if(CMAKE_CUDA_COMPILER)
        message(SEND_ERROR "CUDA compiler/linker are required when compiling with CUDA. "
          "Enable CUDA language support in your CMake project.")
      else()
        message(SEND_ERROR "CUDA compiler/linker are required when compiling with CUDA. "
          "Couldn't find the nvcc compiler. Make sure the CUDA toolchain is installed "
          "and enable CUDA language support in your CMake project.")
      endif()
    endif()
  endif()
elseif(CELERITAS_USE_HIP)
  _celer_set_cache_default(
    CMAKE_HIP_ARCHITECTURES
    "${CELERITAS_CMAKE_HIP_ARCHITECTURES}"
    STRING "HIP architectures"
  )
  find_dependency(hip REQUIRED QUIET)
endif()

if(CELERITAS_USE_Geant4)
  # Geant4 calls `include_directories` for CLHEP :( which is not what we want!
  # Save and restore include directories around the call -- even though as a
  # standalone project Celeritas will never have directory-level includes
  get_directory_property(_include_dirs INCLUDE_DIRECTORIES)
  find_dependency(Geant4 @Geant4_VERSION@ REQUIRED)
  set_directory_properties(PROPERTIES INCLUDE_DIRECTORIES "${_include_dirs}")

  # Re-establish policy if Geant4 11.1/.2's PTL overwrote it
  cmake_policy(VERSION 3.10...3.31)
endif()

if(CELERITAS_USE_HepMC3)
  find_dependency(HepMC3 @HepMC3_VERSION@ REQUIRED)
endif()

find_dependency(nlohmann_json @nlohmann_json_VERSION@ REQUIRED)

if(CELERITAS_USE_MPI)
  find_dependency(MPI REQUIRED)
endif()

if(CELERITAS_USE_OpenMP)
  find_dependency(OpenMP REQUIRED)
endif()

if(CELERITAS_USE_Perfetto AND NOT CELERITAS_BUILTIN_Perfetto)
  find_dependency(Perfetto REQUIRED)
endif()

if(CELERITAS_USE_PNG)
  find_dependency(PNG REQUIRED)
endif()

if(CELERITAS_USE_Python)
  find_dependency(Python 3.6 REQUIRED COMPONENTS Interpreter)
  unset(_components)
endif()

if(CELERITAS_USE_ROOT)
  find_dependency(ROOT @ROOT_VERSION@ REQUIRED)
endif()

if(CELERITAS_USE_Thrust)
  find_dependency(Thrust REQUIRED)
endif()

if(CELERITAS_USE_VecGeom)
  find_dependency(VecGeom @VecGeom_VERSION@ REQUIRED)

  if(CELERITAS_USE_CUDA AND NOT VecGeom_CUDA_FOUND)
    message(SEND_ERROR "CUDA mismatch between the VecGeom installation "
      "at ${VECGEOM_INSTALL_DIR} (VecGeom_CUDA_FOUND=${VecGeom_CUDA_FOUND}) "
      "and Celeritas (CELERITAS_USE_CUDA=${CELERITAS_USE_CUDA})"
    )
  endif()

  if(CELERITAS_USE_Geant4 AND NOT CELERITAS_BUILTIN_G4VG)
    find_dependency(G4VG @G4VG_VERSION@ REQUIRED)
  endif()
endif()

cmake_policy(POP)

#-----------------------------------------------------------------------------#
# Targets
#-----------------------------------------------------------------------------#

if(NOT TARGET celeritas)
  # Load Celeritas-distributed RDC utils after potential older version
  # in dependencies
  # TODO: in the future, rely on its inclusion via upstream VecGeom, and only
  # include here if VecGeom+CUDA are enabled.
  include("${CELERITAS_CMAKE_DIR}/CudaRdcUtils.cmake" OPTIONAL)

  # Load Celeritas library wrappers
  include("${CELERITAS_CMAKE_DIR}/CeleritasLibrary.cmake")
  
  # Load targets created by `install(EXPORT celeritas-targets`
  include("${CELERITAS_CMAKE_DIR}/CeleritasTargets.cmake")

  # Add simple alias for user apps
  if(CELERITAS_USE_Geant4)
    add_library(Celeritas::G4 ALIAS Celeritas::accel)
  else()
    add_library(Celeritas::G4 ALIAS Celeritas::BuildFlags)
  endif()
endif()

#-----------------------------------------------------------------------------#
# Set components for use by the caller

foreach(_dep
    CUDA HIP # Languages
    Geant4 HepMC3 PNG MPI OpenMP Perfetto ROOT VecGeom # Packages
  )
  set(@PROJECT_NAME@_${_dep}_FOUND ${CELERITAS_USE_${_dep}})
endforeach()
unset(_dep)

#-----------------------------------------------------------------------------#
# Print a pretty message if the caller doesn't have a FindCeleritas.cmake

include(FindPackageHandleStandardArgs)
set(${CMAKE_FIND_PACKAGE_NAME}_CONFIG "${CMAKE_CURRENT_LIST_FILE}")
find_package_handle_standard_args(@PROJECT_NAME@ CONFIG_MODE)

#-----------------------------------------------------------------------------#
