//------------------------------- -*- C++ -*- -------------------------------//
// Copyright Celeritas contributors: see top-level COPYRIGHT file for details
// SPDX-License-Identifier: (Apache-2.0 OR MIT)
//---------------------------------------------------------------------------//
//! \file celeritas/optical/gen/GeneratorData.hh
//---------------------------------------------------------------------------//
#pragma once

#include "corecel/Macros.hh"
#include "corecel/Types.hh"
#include "corecel/cont/EnumArray.hh"
#include "corecel/data/AuxInterface.hh"
#include "corecel/data/CollectionStateStore.hh"
#include "celeritas/Quantities.hh"
#include "celeritas/Types.hh"
#include "celeritas/phys/GeneratorInterface.hh"

#include "OffloadData.hh"
#include "../Types.hh"

namespace celeritas
{
//---------------------------------------------------------------------------//
/*!
 * Pre- and post-step data for sampling optical photons.
 */
struct GeneratorStepData
{
    units::LightSpeed speed;
    Real3 pos{};

    //! Check whether the data are assigned
    explicit CELER_FUNCTION operator bool() const
    {
        return speed > zero_quantity();
    }
};

//---------------------------------------------------------------------------//
/*!
 * Input data for sampling optical photons.
 *
 * This contains *all* the data needed to sample optical photons directly
 * generated by tracks in the main stepping loop.
 */
struct GeneratorDistributionData
{
    size_type num_photons{};  //!< Sampled number of photons to generate
    real_type time{};  //!< Pre-step time
    real_type step_length{};
    units::ElementaryCharge charge;
    OptMatId material;
    EnumArray<StepPoint, GeneratorStepData> points;

    //! Check whether the data are assigned
    explicit CELER_FUNCTION operator bool() const
    {
        return num_photons > 0 && step_length > 0 && material;
    }
};

//---------------------------------------------------------------------------//
/*!
 * Optical photon distribution data.
 *
 * The distributions are stored in a buffer indexed by the current buffer size
 * plus the track slot ID. The data is compacted at the end of each step by
 * removing all invalid distributions. The order of the distributions in the
 * buffers is guaranteed to be reproducible.
 */
template<Ownership W, MemSpace M>
struct GeneratorStateData
{
    //// TYPES ////

    template<class T>
    using Items = Collection<T, W, M>;

    //// DATA ////

    // Buffer of distribution data for generating optical photons
    Items<GeneratorDistributionData> distributions;

    // Determines which distribution a thread will generate a primary from
    Items<size_type> offsets;

    //// METHODS ////

    //! Whether all data are assigned and valid
    explicit CELER_FUNCTION operator bool() const
    {
        return !distributions.empty() && !offsets.empty();
    }

    //! Assign from another set of data
    template<Ownership W2, MemSpace M2>
    GeneratorStateData& operator=(GeneratorStateData<W2, M2>& other)
    {
        CELER_EXPECT(other);
        distributions = other.distributions;
        offsets = other.offsets;
        return *this;
    }
};

//---------------------------------------------------------------------------//
/*!
 * Store optical generation states in aux data.
 */
template<MemSpace M>
struct GeneratorState : public GeneratorStateBase
{
    CollectionStateStore<GeneratorStateData, M> store;

    //! True if states have been allocated
    explicit operator bool() const { return static_cast<bool>(store); }
};

//---------------------------------------------------------------------------//
/*!
 * Resize optical buffere.
 */
template<template<Ownership, MemSpace> class P, MemSpace M>
void resize(GeneratorStateData<Ownership::value, M>* state,
            HostCRef<P> const&,
            StreamId,
            size_type size)
{
    CELER_EXPECT(size > 0);
    resize(&state->distributions, size);
    resize(&state->offsets, size);
    CELER_ENSURE(*state);
}

//---------------------------------------------------------------------------//
}  // namespace celeritas
