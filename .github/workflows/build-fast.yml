# Build directly on the GitHub runner with caching
name: build-fast
on:
  workflow_dispatch:
  workflow_call:

concurrency:
  group: build-fast-${{github.ref}}-${{github.event.pull_request.number || github.run_number}}-${{github.workflow}}
  cancel-in-progress: true

jobs:
  linux:
    name: "${{matrix.runner}}-${{matrix.compiler}}-${{matrix.version}}${{matrix.cxxstd && format('-c++{0}', matrix.cxxstd) || ''}}"
    strategy:
      matrix:
        include:
          - runner: jammy
            compiler: gcc
            version: 12
          - runner: jammy
            compiler: clang
            version: 15
          - runner: noble
            compiler: gcc
            version: 14
          - runner: noble
            compiler: clang
            version: 18
          - runner: noble
            compiler: gcc
            version: 14
            cxxstd: 20
          - runner: noble
            compiler: clang
            version: 18
            cxxstd: 20
          - runner: noble-arm
            compiler: clang
            version: 18
            cxxstd: 20
    env:
      GHA_JOB_NAME: "${{matrix.runner}}-${{matrix.compiler}}-${{matrix.version}}${{matrix.cxxstd && format('-c++{0}', matrix.cxxstd) || ''}}"
      CCACHE_DIR: "${{github.workspace}}/.ccache"
      CCACHE_MAXSIZE: "100Mi"
      CMAKE_PRESET: fast
      CC: ${{matrix.compiler}}-${{matrix.version}}
      CXX: ${{matrix.compiler == 'gcc' && 'g++' || 'clang++'}}-${{matrix.version}}
    runs-on: >-
      ${{  matrix.runner == 'jammy' && 'ubuntu-22.04'
        || matrix.runner == 'noble' && 'ubuntu-24.04'
        || matrix.runner == 'noble-arm' && 'ubuntu-24.04-arm'
      }}
    steps:
      - name: Check out Celeritas
        uses: actions/checkout@v4

      ### ENVIRONMENT ###

      - name: Install dependencies
        run: |
          sudo apt-get -q -y update
          sudo apt-get -q -y install \
            ccache \
            nlohmann-json3-dev libgtest-dev libhepmc3-dev libpng-dev \
            ${{matrix.compiler}}-${{matrix.version}} \
            ${{matrix.compiler == 'gcc' && format('g++-{0}', matrix.version) || ''}}
          echo "Installed toolchain:"
          ld --version | head -1
          $CC --version | head -1
          $CXX --version | head -1

      ### CONFIGURE ###

      - name: Configure Celeritas
        run: |
          ln -fs scripts/cmake-presets/ci-ubuntu-github.json CMakeUserPresets.json
          cmake --version
          cmake --preset=${CMAKE_PRESET} \
            ${{matrix.cxxstd && format('-DCMAKE_CXX_STANDARD={0} ', matrix.cxxstd) || ''}} \
            -DCeleritas_GIT_DESCRIBE="${{github.event.pull_request
              && format(';-pr.{0};', github.event.pull_request.number)
              || format(';-{0};', github.ref_name)}}"

      ### BUILD ###

      - name: Restore ccache
        uses: actions/cache/restore@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-${{env.GHA_JOB_NAME}}-${{github.run_id}}
          restore-keys: |
            ccache-${{env.GHA_JOB_NAME}}
      - name: Zero ccache stats
        run: |
          ccache -z
      - name: Build
        id: build
        working-directory: build
        run: |
          ninja
      - name: Show ccache stats
        if: ${{!cancelled()}}
        run: |
          ccache -s
      - name: Save ccache
        if: ${{always() && steps.build.outcome == 'success'}}
        uses: actions/cache/save@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-${{env.GHA_JOB_NAME}}-${{github.run_id}}

      ### TEST ###

      - name: Run unit tests
        id: unittest
        run: |
          ctest --preset=${CMAKE_PRESET}-unit
      - name: Run app tests
        id: apptest
        if: ${{!cancelled() && steps.build.outcome == 'success'}}
        run: |
          ctest --preset=${CMAKE_PRESET}-app
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: >-
          ${{
            always()
            && (steps.unittest.outcome == 'success'
                || steps.unittest.outcome == 'failure')
          }}
        with:
          name: test-results-fast-${{env.GHA_JOB_NAME}}
          path: "test-output/**/*.xml"
          if-no-files-found: error
          retention-days: 1

      ### INSTALL ###

      - name: Install
        working-directory: build
        run: |
          ninja install
      - name: Check installation
        working-directory: install
        run: |
          ./bin/celer-sim --config

  windows:
    defaults:
      run:
        shell: pwsh
    env:
      CCACHE_DIR: "${{github.workspace}}\\.ccache"
      CCACHE_MAXSIZE: "100Mi"
      CMAKE_PRESET: fast
    runs-on: windows-latest
    steps:
      - name: Check out Celeritas
        uses: actions/checkout@v4

      ### ENVIRONMENT ###

      - name: Install dependencies
        run: |
          choco install ninja ccache
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure Celeritas
        run: |
          Copy-Item scripts/cmake-presets/ci-windows-github.json -Destination CMakeUserPresets.json
          cmake --preset=$Env:CMAKE_PRESET `
            -DCeleritas_GIT_DESCRIBE="${{github.event.pull_request
              && format(';-pr.{0};', github.event.pull_request.number)
              || format(';-{0};', github.ref_name)}}"

      ### BUILD ###

      - name: Restore ccache
        uses: actions/cache/restore@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-fast-windows-${{github.run_id}}
          restore-keys: |
            ccache-fast-windows
      - name: Zero ccache stats
        run: |
          ccache -z
      - name: Build
        id: build
        run: |
          cmake --version
          cmake --build --preset=$Env:CMAKE_PRESET
      - name: Show ccache stats
        if: ${{!cancelled()}}
        run: |
          ccache -s
      - name: Save ccache
        if: ${{always() && steps.build.outcome == 'success'}}
        uses: actions/cache/save@v4
        with:
          path: ${{env.CCACHE_DIR}}
          key: ccache-fast-windows-${{github.run_id}}

      ### TEST ###

      - name: Run unit tests
        id: unittest
        continue-on-error: true
        run: |
          ctest --preset=$Env:CMAKE_PRESET-unit
      - name: Run app tests
        id: apptest
        if: ${{!cancelled() && steps.build.outcome == 'success'}}
        run: |
          ctest --preset=$Env:CMAKE_PRESET-app
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: >-
          ${{
            always()
            && (steps.unittest.outcome == 'success'
                || steps.unittest.outcome == 'failure')
          }}
        with:
          name: test-results-fast-windows
          path: "test-output/**/*.xml"
          if-no-files-found: error
          retention-days: 1

      ### INSTALL ###

      - name: Install
        working-directory: build
        run: |
          cmake --install .
      - name: Check installation
        working-directory: install
        run: |
          ./bin/celer-sim --config

# vim: set nowrap tw=100:
